{"ast":null,"code":"var _jsxFileName = \"/Users/agustinalima/Documents/Trabajos/Digital House/tiendasound-dashboard/tiendasound-dashboard/src/components/dashboard/CardChart.js\",\n  _s = $RefreshSig$();\nimport '../css/cards.css';\nimport React, { useEffect, useState } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CardChart() {\n  _s();\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const responses = await Promise.all([fetch('https://tienda-sound.onrender.com/productos/api/categoria1'), fetch('https://tienda-sound.onrender.com/productos/api/categoria2'), fetch('https://tienda-sound.onrender.com/productos/api/categoria3'), fetch('https://tienda-sound.onrender.com/productos/api/categoria4'), fetch('https://tienda-sound.onrender.com/productos/api/categoria5'), fetch('https://tienda-sound.onrender.com/productos/api/categoria6')]);\n\n        // Obtener solo el valor de \"total\" de cada respuesta y almacenarlo en el estado\n        const totals = await Promise.all(responses.map(response => response.json())).then(data => data.map(responseData => responseData.total));\n        setData(totals);\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Cargando...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Cantidad de Productos por Categor\\xEDa\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BarChart, {\n      width: 600,\n      height: 400,\n      data: data.map((total, index) => ({\n        name: `Categoria ${index + 1}`,\n        total\n      })),\n      margin: {\n        top: 20,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"length\",\n        fill: \"#8884d8\",\n        barSize: 30\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(CardChart, \"cUIHirocPIQDoBhSWLVYEdhEgBU=\");\n_c = CardChart;\nexport default CardChart;\nvar _c;\n$RefreshReg$(_c, \"CardChart\");","map":{"version":3,"names":["React","useEffect","useState","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","jsxDEV","_jsxDEV","CardChart","_s","data","setData","isLoading","setIsLoading","fetchData","responses","Promise","all","fetch","totals","map","response","json","then","responseData","total","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","index","name","margin","top","right","left","bottom","strokeDasharray","dataKey","fill","barSize","_c","$RefreshReg$"],"sources":["/Users/agustinalima/Documents/Trabajos/Digital House/tiendasound-dashboard/tiendasound-dashboard/src/components/dashboard/CardChart.js"],"sourcesContent":["import '../css/cards.css'\nimport React, { useEffect, useState } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\n\nfunction CardChart() {\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const responses = await Promise.all([\n          fetch('https://tienda-sound.onrender.com/productos/api/categoria1'),\n          fetch('https://tienda-sound.onrender.com/productos/api/categoria2'),\n          fetch('https://tienda-sound.onrender.com/productos/api/categoria3'),\n          fetch('https://tienda-sound.onrender.com/productos/api/categoria4'),\n          fetch('https://tienda-sound.onrender.com/productos/api/categoria5'),\n          fetch('https://tienda-sound.onrender.com/productos/api/categoria6')\n        ]);\n\n       // Obtener solo el valor de \"total\" de cada respuesta y almacenarlo en el estado\n       const totals = await Promise.all(responses.map(response => response.json()))\n       .then(data => data.map(responseData => responseData.total));\n\n     setData(totals);\n     setIsLoading(false);\n      } catch (error) {\n     console.error('Error fetching data:', error);\n      }\n      };\n\n      fetchData();\n  }, []);\n\n  if (isLoading) {\n    return <div>Cargando...</div>;\n  }\n\n  return (\n    <div>\n      <h2>Cantidad de Productos por Categor√≠a</h2>\n      <BarChart\n        width={600}\n        height={400}\n        data={data.map((total, index) => ({ name: `Categoria ${index + 1}`, total }))}\n        margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Bar dataKey=\"length\" fill=\"#8884d8\" barSize={30} />\n      </BarChart>\n    </div>\n  );\n}\n\n\n\n\nexport default CardChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}